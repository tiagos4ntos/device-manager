// Code generated by MockGen. DO NOT EDIT.
// Source: device_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entity "github.com/tiagos4ntos/device-manager/internal/domain/device/entity"
)

// MockDeviceRepository is a mock of DeviceRepository interface.
type MockDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepositoryMockRecorder
}

// MockDeviceRepositoryMockRecorder is the mock recorder for MockDeviceRepository.
type MockDeviceRepositoryMockRecorder struct {
	mock *MockDeviceRepository
}

// NewMockDeviceRepository creates a new mock instance.
func NewMockDeviceRepository(ctrl *gomock.Controller) *MockDeviceRepository {
	mock := &MockDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRepository) EXPECT() *MockDeviceRepositoryMockRecorder {
	return m.recorder
}

// CreateDevice mocks base method.
func (m *MockDeviceRepository) CreateDevice(ctx context.Context, device *entity.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", ctx, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockDeviceRepositoryMockRecorder) CreateDevice(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockDeviceRepository)(nil).CreateDevice), ctx, device)
}

// DeleteDevice mocks base method.
func (m *MockDeviceRepository) DeleteDevice(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice.
func (mr *MockDeviceRepositoryMockRecorder) DeleteDevice(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockDeviceRepository)(nil).DeleteDevice), ctx, id)
}

// FullyUpdateDevice mocks base method.
func (m *MockDeviceRepository) FullyUpdateDevice(ctx context.Context, device *entity.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullyUpdateDevice", ctx, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// FullyUpdateDevice indicates an expected call of FullyUpdateDevice.
func (mr *MockDeviceRepositoryMockRecorder) FullyUpdateDevice(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullyUpdateDevice", reflect.TypeOf((*MockDeviceRepository)(nil).FullyUpdateDevice), ctx, device)
}

// GetDeviceByID mocks base method.
func (m *MockDeviceRepository) GetDeviceByID(ctx context.Context, id uuid.UUID) (entity.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceByID", ctx, id)
	ret0, _ := ret[0].(entity.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceByID indicates an expected call of GetDeviceByID.
func (mr *MockDeviceRepositoryMockRecorder) GetDeviceByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceByID", reflect.TypeOf((*MockDeviceRepository)(nil).GetDeviceByID), ctx, id)
}

// ListDevices mocks base method.
func (m *MockDeviceRepository) ListDevices(ctx context.Context, params map[string]any) ([]entity.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevices", ctx, params)
	ret0, _ := ret[0].([]entity.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevices indicates an expected call of ListDevices.
func (mr *MockDeviceRepositoryMockRecorder) ListDevices(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevices", reflect.TypeOf((*MockDeviceRepository)(nil).ListDevices), ctx, params)
}

// UpdateDeviceState mocks base method.
func (m *MockDeviceRepository) UpdateDeviceState(ctx context.Context, deviceID uuid.UUID, newState entity.DeviceState) (entity.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceState", ctx, deviceID, newState)
	ret0, _ := ret[0].(entity.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeviceState indicates an expected call of UpdateDeviceState.
func (mr *MockDeviceRepositoryMockRecorder) UpdateDeviceState(ctx, deviceID, newState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceState", reflect.TypeOf((*MockDeviceRepository)(nil).UpdateDeviceState), ctx, deviceID, newState)
}
